[Chap01. 소프트웨어 공학 개론]
1. 소프트웨어 공학: 소프트웨어를 개발하는 과정에서 발생하는 문제를 해결하기 위한 학문으로 개발 프로세스, 방법론, 아키텍처, 도구, 기법 등을 모든 것을 포함한다. 
2. SWEBOK은 Software Engineering Body of Knowledge이다
3. 프로세스는 소프트웨어 개발을 위한 일련의 절차와 활동인 반면, 방법론은 프로세스를 수행하기 위한 구체적인 방법을 의미한다.
4. SDLC은 계획->요구분석->설계->구현->테스트->배포->유지보수이며, 어떤 절차로 진행할 것인지의 문제가 프로세스, 그를 위한 접근법과 원칙, 철학이 방법론이다.
5. 프로세스: 폭포수 모델, V 모델, 프로토타입 모델(요구분석에서 프로토 제작), 나선형 모델(요구분석->위험분석->개발->사용자 평가)
  , UP (UML기반으로 Inception, Elaboration, Construction, Transition 4개의 Phase안에서 분석->설계->구현->테스트->배포를 진행하며, SDLC를 점진적으로 반복적으로 수행)
  , RUP (통합된 UP프로세스)
  , Agile (개인과의 상호작용, 작동하는 소프트웨어, 고객과의 협력, 변화대응, 능동적인 대처 원칙을 따르며 XP, Scrum, Lean, Kanban, Crystal, FDD등이 있다 feat. 프로토타이핑: 개발자와 사용자간 상호 이해 및 지식 교환_프로토 타입으로 의사소통)
6. 방법론: OOAD는 프로그램을 객체와 객체 간 인터페이스 형태로 구성하기 위해 문제 영역에서 객체, 클래스, 관계를 식별해 설계 모델로 변환하는 방법론
  객체 지향 설계는 소프트웨어 객체를 정의하는 것 뿐 아니라 요구사항을 충족시키기 위해 객체들이 어떻게 협력하는 지를 정의하는 정적관점과 동적 관점으로 나뉜다.
  설계 클래스 다이어그램은 도메인에 없는 다양한 솔루션 클래스(컨트롤러)도 포함하며, 응집도와 결합도를 고려해야한다.
  , Scrum은 팀의 개선과 협업을 강조하는 방법론으로 여러개의 반복적인 개발 주기인 Sprint로 나누어 진행한다. 이때 Sprint Backlog(Spring 목표를 달성하기 위한 작업목록)를 작성.
  Product Owner는 고객의 대변인 역활을 수행하여 Product Backlog(우선순위에 따른 요구사항 목록. UserStory)를 제시한다. Scrum Master는 매자일 코치로서 팀을 보호한다.
  Sprint Review는 Sprint 마지막 날 개발 내용을 시연하고 검토하는 것이며, Sprint Retrospect는 Sprint 마지막 날 좋았던 점 과 개선 사항을 도출하는 것이다.

[Chap02. SW 설계 원칙]
1. GRASP는 객체지향설계의 핵심인 객체 책임 부여에 대한 원칙들을 말하는 패턴으로, OOP에서 책임을 기본적으로 메서드를 통해 구현된다.
   ex) DTO클래스는 다른 레이어로 데이터를 운반하며, 비지니스 로직에 따라 데이터 값을 반영시키는 책임을 가진다.
   GRASP는 5개의 기본 패턴과 추가적인 4개의 패턴으로 총 9개의 패턴을 제시한다. 각 패턴은 문제와 해결책으로 기술된다.
   - Information Expert: 책임할당을 위한 일반적인 원리는? 책임수행을 위한 정보가 가장 많은 객체에게 할당(데이터와 처리로직이 묶여있으며, 내부에서 데이터 처리하여 외부에 기능제공)
   - Creator: 클래스의 인스턴스 생성 책임은? B가 A를 포함하거나, 기록하거나, 많이 사용하거나, 생성시 필요한 정보를 갖고있다면(팩토리)
   - High Cohension: 복잡하지 않으려면? 켤합도가 높게 책임할당(응집력이 높다는 것은 주어진 요소의 책임이 밀접하며 집중되어 있다. ex 패키지와 서브패키지로 모듈을 분리)
   - Low Coupling: 클래스 간 의존도를 낮춰 재사용성을 높이려면? 커플링이 작게 책임을 할당(한 요소가 다른 요소에 약하게 의존하고 알고있고 연결되게. 하지만 객체지향은 객체 간 			관계를 나타내야하기에 커플링이 무조건 존재한다. X가 Y의 인스턴스를 갖거나, 서비스를 요청하거나, 서브 클래스거나, 인터페이스거나)
약간 응집도는 객체 내부의 기능들이 밀접한가? 라면 커플링은 객체 간 의존도가 강한가? 느낌이네

   - Controller: UI계층의 사용자의 입력을 받아 처리하는 것은 누구의 책임? 컨트롤러가 사용자 요청을 받아 로직을 분기해서 처리(non-UI객체로 둘 이상의 use case에서도 사용 가능)
   - Polymorphism: 대체 가능한 소프트웨어 구성 요소들을 어떻게 생산하는가? 다형성(객체 Type별 분기를 처리하는 경우 다형성을 사용하자. 명시적인 분기는 control coupling이 발생하기에 DI(Dependency Injection)등의 Strategy패턴을 사용하자.)
   - pure fabrication(제작): Information Expert에서 High Cohension과 Low Coupling이 위반된다면? 문제가 되는 책임만 모아 별도의 클래스를 만들어 High Cohension을 갖는다
     ex) DAO(Data Access Object), Rest Controller
   - Indirection(우회): 두 객체 간 직접적인 커플링을 피하려면? 두 객체 사이의 중간 객체를 만든다(Model과 View 사이의 Controller. GoF패턴 중 Adaptor패턴)
   - Protected variations: 한 요소의 변화나 확장이 다른 요소에 영향을 미친다면? 변화가 전이되는 곳에 인터페이스를 사용
2. 모듈의 독립성은 응집도가 강하고, 결합도가 약하고, 크기가 작을 때 높아진다.
3. 결합도(Coupling)은 모듈 간 상호의존하는 정도 혹은 두 모듈 사이의 연관 관계를 의미하며, 약할수록 좋다. 6개로 분류된다
  - Data Coupling: 모듈 간 파라미터 등을 통해 로직 제어 없이 데이터를 주고받은 경우
  - Stamp Coupling: 두 모듈이 동일한 자료구조를 참조(자료구조가 변경되면 참조하는 모든 모듈에 영향을 줌)
  - Control Coupling: 어떤 모듈이 다른 모듈 내부 논리흐름을 제어하는 요소를 전달한 경우(flag값)
  - External Coupling: 모듈이 외부의 모듈이나 데이터를 참조하는 경우(외부 데이터, 통신 프로토콜 공유)
  - Common Coupling: 여러 모듈이 하나의 데이터 영역을 참조(전역변수, 클래스 변수, 인스턴스 변수)
  - Content Coupling: 한 모듈이 다른 모듈의 내부 기능이나 데이터를 직접 참조
4. 응집도(Cohesion)은 모듈의 내부 요소들이 서로 관련있는 정도를 말하는 것으로 갈할수록 좋다. 7개로 분류된다.
  - Functional Cohesion: 모듈 내 모든 요소들이 하나의 기능을 수행하기 위해 구성(회원관리클래스)
  - Sequential Cohesion: 한 요소의 출력이 다른 요소의 입력으로 차례로 사용
  - Communicational Cohesion: 동일한 입력과 출력을 사용하는 다른 기능들(처리 순서가 중요x)
  - Procedural Cohesion: 여러 기능 요소가 순차적으로 수행되지만 다음 기능 요소로 데이터가 아닌 제어 요소가 전달되는 경우(제품 삭제 시 권한 확인 후 삭제를 진행)
  - Temporal Cohesion: 순서에 상관없이 특정 시점에 수행되는 것을 모아둠(구동 시 데이터 및 객체 초기화)
  - Logical Cohesion: 유사한 성격의 처리 요소들이 한 모듈에서 처리되는 경우(LogicalController)
  - Coincidental Cohesion: 아무 관련 없이 구성
5. SOLID원칙은  5가지 소프트웨서 설계원칙으로 분류된다.
  - Single Responsibility Principle: 클래스, 함수 등은 하나의 책임(기능)만 가져야 한다.
  - Open-Closed Principle: 기존 코드 변경없이 기능 수정 및 추가(상속과 확장을 이용한)가 가능해야한다.
  - Liskov Substitution Principle: 다운캐스팅시에도 문제가 없어야한다. 일관성을 위해 일반화 관계(IS-A)가 성립해야한다.
  - Interface Seperate Principle: 사용자에게 필요한 메서드만 포함하는 여러개의 구체적인 인터페이스를 만들어, 사용하지 않는 메서드의 의존관계를 배제한다.
  - Dependency Inversionv Principle: 의존관계를 맺을 때는 구체적인 클래스보다 추상적인 클래스나 인터페이스에 의존하는 것이 좋다.
6. 그 외 KISS(Keep It Simple Stupid), DRY(Don't Repeat Yourself), WET(Write Everything Twice), YAGNI(You Ain't Gonna Need It) 등이 있다.
7. 실습: 결제를 진행하는 클래스 Checkout SOLID원칙에 맞춰서. 내 코드 + Function객체에 람다사용하여 결제 진행
   Function<Integer, Integer, Integer> add=(a, b)->a+b;
   int result=add.apply(3,4);

[Chap03. UML]
1. UML은 시스템의 상호 작용, 전체 구조, 컴포넌트 간의 관계 등을 시작적으로 표현하기 위한 여러 표기법과 다이어그램 구조의 정의로, 시각적인 모델링 결과로 시스템 분석 및 설계의 결과물로 활용할 수 있다(Computer-Aided Software Engineering도구로 자동 소스생성도 가능) UML은 방법론이 아니지만, UP 프로세스의 기본 도구이다.
2. UML은 Structual(Values, Classifiers, Packages, Common Structure), Behavioral(State Machines, Activities, Interactions, Actions, Common Behavior), Supplemental(Use Cases, Deployments, Information Flows) 모델링 영역으로 나뉘어있다.
3. UML은 분석, 설계, 구현의 전 과정에 사용될 수 있기에 가시화 언어, 구축 언어, 문서화 언어, 명세화 언어 네가지의 특징을 가지며, 아래의 세가지 관점으로 활용된다.
  - sketch: 개념적 모델링 결과의 가시화 표현으로, 공통된 notation으로 의사소통하며 어려운 부분을 탐색하기 위해 불완전한 다이어그램을 작성한다
  - blueprint: 분석/설계 단계의 각 과정에서 필요한 모델을 정의하여 규격을 만들고, CASE 도구를 사용해 문서생성이 가능하다
  - programming language: CASE도구를 사용하여 구현관점에서 코드로 변환하거나, 코드를 UML모델로 역공학이 가능하다.
4. UML Fever는 UML의 부정적인 영향을 의미하며, 너무 상세한 UML시도, 거대한 UML, 코드없이 만드려는 시도, 비전문가가 제작 등이 있다.
5. Structural Diagram으로 Class, Object, Package, Component, Deployment, Profile, Composite Structure가 있다
6. Behavior Diagram으로 UseCase, Sequence, Activity, State Machine, Communication, Timing, Interaction Overview가 있다.
7. UML의 구성요소로 솔루션 영역의 논리뷰, 프로세스뷰, 개발뷰, 물리뷰와 문제 영역의 시나리오뷰로 구성된다.
  - Notation: Actor, Class, Use Case, :Object, ->, <>->_relation, --->_return
  - Relationship: 메서드 참조Dependency(---Use-->), 멤버변수참조Association(->), 부모-자식 Generalization(----implements--> 혹은 -Extends->), 확장관계 
		     Extensibility(<<interface>> 혹은 Stereo Type)
8. 4+1 View 그림:  논리뷰가 개발 및 프로세스 뷰를 거쳐 물리뷰가 되며 모든 뷰는 시나리오 뷰를 리턴
  - 시나리오 뷰: 사용자, 설계자, 개발자, 테스터의 모든 관점으로 외부 엑터 관점에서의 시스템 기능을 설명. 아키텍처 검증의 기초가 된다.(UseCase, Actvity, Sequence)
  - 논리 뷰: 설계자, 개발자 관점으로 시스템 구성요소를 찾아 기능이 어떻게 제공되는지를 표현하며 정적&동적 다이어그램을 포함한다.(Class, Object, State Machine, Sequence, Activity)
  - 프로세스 뷰: 개발자, 시스템 통합자 관점으로 프로세스와 프로세서로 구분되는 시스템 분할을 설명(비기능적인 이벤트처리, 비동기, 효율) 논리뷰에서 찾은 시스템 구성 요소의 속성(State Machine, Sequence, Activity, Component)
  - 개발 뷰: 컴포넌트 구조와 의존성, 부가적인 정보를 정의한다. 유지보수와 개발 난이도 등을 파악할 수 있다(Class, Package, Component)
  - 물리 뷰: 개발자, 시스템 통합자, 테스터 광점으로 물리적인 배치를 보여준다. 프로세스 뷰+개발 뷰의 패키지가 어떤 하드웨어에서 작동되는지(Deployment)
9. UseCase Diagram: 사용자(Actor)와 시스템 기능(UseCase) 간 상호작용을 표현한 것으로, 연동이 필요한 다른 System Actor나 Proxy Actor도 정의가능하다. 도메인 이해가 중요
  - 구성요소: 유스케이스(동사형태), 액터(사용자, 시스템), 연관(엑터와 유스케이스 관계_실선), 일반화(액터의 상속관계 구매자<|ㅡ회원)
  - 작성요령: 엑터ㅡ유스케이스, <ㅡ(명확한 방향성이 있는 경우), 포함관계(필수), 확장관계(특정이벤트에 동작. 방향 확장요소->원인요소), include와 extend는 별도의 notation없이 stereo type으로 표현(원)
  - 유의할 점: 순서도를 그리면 안되며, 모든 기능은 개별기능이어야하며, include는 독립된 업무가 현재 업무에 포함되어 있는 경우에만(휴학 시 도서반납)
		  extend는 기존 유스케이스로 해결이 어려운 경우 다른 유스케이스로 연결(휴학 중 군휴학발생)
10. UseCase Specification(명세, 시나리오)는 기능요구사항을 이야기로 서술하며, 이 과정에서 액터, usecase다이어그램과 명세서를 작성한다.
     양식: 유스케이스명, 액터명, 개요, 사전조건, 사후조건, 기본흐름, 대체흐름, 예외
11. Sequence Diagram: 객체간 상호작용을 순차적으로 표현하며 단일 유스케이스의 시나리오를 분석할 때 주로 사용한다. 프토로콜, 프로세스 표현에 적합
    분석 단계에선 도메인 객체, 설계 단계에서 클래스, 인스턴스 수준에서 사용가능하다.
  - 구성요소: Object&Lifeline(객체와 연결된 실선), Activation, Message(번호를 붙여 단계표현가능), Combined Fragment(alt_if-else, opt_if, loop_for, par_parallel), Guard(조건)
  그림 잘 보기(특히 activation 구분 및 없이 message만 있는 것들(구매확정)







